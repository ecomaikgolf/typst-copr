From 45c6a1d972ef36836194e1b4dafdf1404ea129b3 Mon Sep 17 00:00:00 2001
From: aodenis <45949528+aodenis@users.noreply.github.com>
Date: Thu, 20 Feb 2025 00:31:11 +0100
Subject: [PATCH 1/7] Fix high CPU usage due to inotify watch triggering itself

---
 crates/typst-cli/src/watch.rs | 20 +++++++++-----------
 1 file changed, 9 insertions(+), 11 deletions(-)

diff --git a/crates/typst-cli/src/watch.rs b/crates/typst-cli/src/watch.rs
index 91132fc30c13..ee18bc639375 100644
--- a/crates/typst-cli/src/watch.rs
+++ b/crates/typst-cli/src/watch.rs
@@ -237,16 +237,7 @@ impl Watcher {
 
     /// Whether a watch event is relevant for compilation.
     fn is_event_relevant(&self, event: &notify::Event) -> bool {
-        // Never recompile because the output file changed.
-        if event
-            .paths
-            .iter()
-            .all(|path| is_same_file(path, &self.output).unwrap_or(false))
-        {
-            return false;
-        }
-
-        match &event.kind {
+        let type_relevant = match &event.kind {
             notify::EventKind::Any => true,
             notify::EventKind::Access(_) => false,
             notify::EventKind::Create(_) => true,
@@ -259,7 +250,14 @@ impl Watcher {
             },
             notify::EventKind::Remove(_) => true,
             notify::EventKind::Other => false,
-        }
+        };
+
+        // Never recompile because the output file changed.
+        return type_relevant
+            && !event
+                .paths
+                .iter()
+                .all(|path| is_same_file(path, &self.output).unwrap_or(false));
     }
 }
 

From 3fbde6c4d860fab6fd0df0e770d853eed4075f3d Mon Sep 17 00:00:00 2001
From: aodenis <45949528+aodenis@users.noreply.github.com>
Date: Thu, 20 Feb 2025 00:47:36 +0100
Subject: [PATCH 2/7] linting fix

---
 crates/typst-cli/src/watch.rs | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/crates/typst-cli/src/watch.rs b/crates/typst-cli/src/watch.rs
index ee18bc639375..97eb07d0fbf5 100644
--- a/crates/typst-cli/src/watch.rs
+++ b/crates/typst-cli/src/watch.rs
@@ -253,11 +253,11 @@ impl Watcher {
         };
 
         // Never recompile because the output file changed.
-        return type_relevant
+        type_relevant
             && !event
                 .paths
                 .iter()
-                .all(|path| is_same_file(path, &self.output).unwrap_or(false));
+                .all(|path| is_same_file(path, &self.output).unwrap_or(false))
     }
 }
 

From 0576a2fe9f4e46eb42349989cfcf41b8dc1024e2 Mon Sep 17 00:00:00 2001
From: aodenis <45949528+aodenis@users.noreply.github.com>
Date: Sat, 22 Feb 2025 00:26:26 +0100
Subject: [PATCH 3/7] Increase code readability

---
 crates/typst-cli/src/watch.rs | 20 ++++++++++++++------
 1 file changed, 14 insertions(+), 6 deletions(-)

diff --git a/crates/typst-cli/src/watch.rs b/crates/typst-cli/src/watch.rs
index 97eb07d0fbf5..bc2fdc16513b 100644
--- a/crates/typst-cli/src/watch.rs
+++ b/crates/typst-cli/src/watch.rs
@@ -237,7 +237,7 @@ impl Watcher {
 
     /// Whether a watch event is relevant for compilation.
     fn is_event_relevant(&self, event: &notify::Event) -> bool {
-        let type_relevant = match &event.kind {
+        let kind_relevant = match &event.kind {
             notify::EventKind::Any => true,
             notify::EventKind::Access(_) => false,
             notify::EventKind::Create(_) => true,
@@ -252,12 +252,20 @@ impl Watcher {
             notify::EventKind::Other => false,
         };
 
+        if !kind_relevant {
+            return false;
+        }
+
         // Never recompile because the output file changed.
-        type_relevant
-            && !event
-                .paths
-                .iter()
-                .all(|path| is_same_file(path, &self.output).unwrap_or(false))
+        if event
+            .paths
+            .iter()
+            .all(|path| is_same_file(path, &self.output).unwrap_or(false))
+        {
+            return false;
+        }
+
+        true
     }
 }
 

From 77b4c28877d1709e4352a91c016d3368940b21b6 Mon Sep 17 00:00:00 2001
From: aodenis <45949528+aodenis@users.noreply.github.com>
Date: Sun, 23 Feb 2025 16:43:02 +0100
Subject: [PATCH 4/7] remove the output file check in watcher

---
 crates/typst-cli/src/watch.rs | 27 ++++-----------------------
 1 file changed, 4 insertions(+), 23 deletions(-)

diff --git a/crates/typst-cli/src/watch.rs b/crates/typst-cli/src/watch.rs
index bc2fdc16513b..78bf12f08a3b 100644
--- a/crates/typst-cli/src/watch.rs
+++ b/crates/typst-cli/src/watch.rs
@@ -9,7 +9,6 @@ use codespan_reporting::term::termcolor::WriteColor;
 use codespan_reporting::term::{self, termcolor};
 use ecow::eco_format;
 use notify::{Event, RecommendedWatcher, RecursiveMode, Watcher as _};
-use same_file::is_same_file;
 use typst::diag::{bail, StrResult};
 use typst::utils::format_duration;
 
@@ -23,12 +22,12 @@ use crate::{print_error, terminal};
 pub fn watch(timer: &mut Timer, command: &WatchCommand) -> StrResult<()> {
     let mut config = CompileConfig::watching(command)?;
 
-    let Output::Path(output) = &config.output else {
+    let Output::Path(_) = &config.output else {
         bail!("cannot write document to stdout in watch mode");
     };
 
     // Create a file system watcher.
-    let mut watcher = Watcher::new(output.clone())?;
+    let mut watcher = Watcher::new()?;
 
     // Create the world that serves sources, files, and fonts.
     // Additionally, if any files do not exist, wait until they do.
@@ -79,8 +78,6 @@ pub fn watch(timer: &mut Timer, command: &WatchCommand) -> StrResult<()> {
 
 /// Watches file system activity.
 struct Watcher {
-    /// The output file. We ignore any events for it.
-    output: PathBuf,
     /// The underlying watcher.
     watcher: RecommendedWatcher,
     /// Notify event receiver.
@@ -107,7 +104,7 @@ impl Watcher {
     const POLL_INTERVAL: Duration = Duration::from_millis(300);
 
     /// Create a new, blank watcher.
-    fn new(output: PathBuf) -> StrResult<Self> {
+    fn new() -> StrResult<Self> {
         // Setup file watching.
         let (tx, rx) = std::sync::mpsc::channel();
 
@@ -121,7 +118,6 @@ impl Watcher {
             .map_err(|err| eco_format!("failed to setup file watching ({err})"))?;
 
         Ok(Self {
-            output,
             rx,
             watcher,
             watched: HashMap::new(),
@@ -237,7 +233,7 @@ impl Watcher {
 
     /// Whether a watch event is relevant for compilation.
     fn is_event_relevant(&self, event: &notify::Event) -> bool {
-        let kind_relevant = match &event.kind {
+        match &event.kind {
             notify::EventKind::Any => true,
             notify::EventKind::Access(_) => false,
             notify::EventKind::Create(_) => true,
@@ -250,22 +246,7 @@ impl Watcher {
             },
             notify::EventKind::Remove(_) => true,
             notify::EventKind::Other => false,
-        };
-
-        if !kind_relevant {
-            return false;
-        }
-
-        // Never recompile because the output file changed.
-        if event
-            .paths
-            .iter()
-            .all(|path| is_same_file(path, &self.output).unwrap_or(false))
-        {
-            return false;
         }
-
-        true
     }
 }
 

From cb1bcc9d75b06f58c037d32cbe51c4783fc3cedb Mon Sep 17 00:00:00 2001
From: aodenis <45949528+aodenis@users.noreply.github.com>
Date: Sun, 23 Feb 2025 17:00:42 +0100
Subject: [PATCH 5/7] remove same-file as typst-cli dependency

---
 Cargo.lock                  | 1 -
 Cargo.toml                  | 1 -
 crates/typst-cli/Cargo.toml | 1 -
 3 files changed, 3 deletions(-)

diff --git a/Cargo.lock b/Cargo.lock
index 1851134a55e0..d340ec9f7d1a 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -2774,7 +2774,6 @@ dependencies = [
  "parking_lot",
  "pathdiff",
  "rayon",
- "same-file",
  "self-replace",
  "semver",
  "serde",
diff --git a/Cargo.toml b/Cargo.toml
index 198aff3c6108..1ef40217b93b 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -100,7 +100,6 @@ resvg = { version = "0.43", default-features = false, features = ["raster-images
 roxmltree = "0.20"
 rust_decimal = { version = "1.36.0", default-features = false, features = ["maths"] }
 rustybuzz = "0.18"
-same-file = "1"
 self-replace = "1.3.7"
 semver = "1"
 serde = { version = "1.0.184", features = ["derive"] }
diff --git a/crates/typst-cli/Cargo.toml b/crates/typst-cli/Cargo.toml
index 7e9b93f93109..550e7da6bad6 100644
--- a/crates/typst-cli/Cargo.toml
+++ b/crates/typst-cli/Cargo.toml
@@ -40,7 +40,6 @@ open = { workspace = true }
 parking_lot = { workspace = true }
 pathdiff = { workspace = true }
 rayon = { workspace = true }
-same-file = { workspace = true }
 self-replace = { workspace = true, optional = true }
 semver = { workspace = true }
 serde = { workspace = true }

From 185739376dae2ac66d2d5dec77030e377bfb4d1b Mon Sep 17 00:00:00 2001
From: Laurenz <laurmaedje@gmail.com>
Date: Tue, 25 Feb 2025 13:18:23 +0100
Subject: [PATCH 6/7] Revert "remove same-file as typst-cli dependency"

This reverts commit cb1bcc9d75b06f58c037d32cbe51c4783fc3cedb.
---
 Cargo.lock                  | 1 +
 Cargo.toml                  | 1 +
 crates/typst-cli/Cargo.toml | 1 +
 3 files changed, 3 insertions(+)

diff --git a/Cargo.lock b/Cargo.lock
index d340ec9f7d1a..1851134a55e0 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -2774,6 +2774,7 @@ dependencies = [
  "parking_lot",
  "pathdiff",
  "rayon",
+ "same-file",
  "self-replace",
  "semver",
  "serde",
diff --git a/Cargo.toml b/Cargo.toml
index 1ef40217b93b..198aff3c6108 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -100,6 +100,7 @@ resvg = { version = "0.43", default-features = false, features = ["raster-images
 roxmltree = "0.20"
 rust_decimal = { version = "1.36.0", default-features = false, features = ["maths"] }
 rustybuzz = "0.18"
+same-file = "1"
 self-replace = "1.3.7"
 semver = "1"
 serde = { version = "1.0.184", features = ["derive"] }
diff --git a/crates/typst-cli/Cargo.toml b/crates/typst-cli/Cargo.toml
index 550e7da6bad6..7e9b93f93109 100644
--- a/crates/typst-cli/Cargo.toml
+++ b/crates/typst-cli/Cargo.toml
@@ -40,6 +40,7 @@ open = { workspace = true }
 parking_lot = { workspace = true }
 pathdiff = { workspace = true }
 rayon = { workspace = true }
+same-file = { workspace = true }
 self-replace = { workspace = true, optional = true }
 semver = { workspace = true }
 serde = { workspace = true }

From b3db2668c54d07424e8ab705821f616c58322e79 Mon Sep 17 00:00:00 2001
From: Laurenz <laurmaedje@gmail.com>
Date: Tue, 25 Feb 2025 13:35:35 +0100
Subject: [PATCH 7/7] Reorganize a bit

---
 crates/typst-cli/src/watch.rs | 58 +++++++++++++++++++++++------------
 1 file changed, 38 insertions(+), 20 deletions(-)

diff --git a/crates/typst-cli/src/watch.rs b/crates/typst-cli/src/watch.rs
index 78bf12f08a3b..cc727f0fc885 100644
--- a/crates/typst-cli/src/watch.rs
+++ b/crates/typst-cli/src/watch.rs
@@ -9,6 +9,7 @@ use codespan_reporting::term::termcolor::WriteColor;
 use codespan_reporting::term::{self, termcolor};
 use ecow::eco_format;
 use notify::{Event, RecommendedWatcher, RecursiveMode, Watcher as _};
+use same_file::is_same_file;
 use typst::diag::{bail, StrResult};
 use typst::utils::format_duration;
 
@@ -22,12 +23,12 @@ use crate::{print_error, terminal};
 pub fn watch(timer: &mut Timer, command: &WatchCommand) -> StrResult<()> {
     let mut config = CompileConfig::watching(command)?;
 
-    let Output::Path(_) = &config.output else {
+    let Output::Path(output) = &config.output else {
         bail!("cannot write document to stdout in watch mode");
     };
 
     // Create a file system watcher.
-    let mut watcher = Watcher::new()?;
+    let mut watcher = Watcher::new(output.clone())?;
 
     // Create the world that serves sources, files, and fonts.
     // Additionally, if any files do not exist, wait until they do.
@@ -78,6 +79,8 @@ pub fn watch(timer: &mut Timer, command: &WatchCommand) -> StrResult<()> {
 
 /// Watches file system activity.
 struct Watcher {
+    /// The output file. We ignore any events for it.
+    output: PathBuf,
     /// The underlying watcher.
     watcher: RecommendedWatcher,
     /// Notify event receiver.
@@ -104,7 +107,7 @@ impl Watcher {
     const POLL_INTERVAL: Duration = Duration::from_millis(300);
 
     /// Create a new, blank watcher.
-    fn new() -> StrResult<Self> {
+    fn new(output: PathBuf) -> StrResult<Self> {
         // Setup file watching.
         let (tx, rx) = std::sync::mpsc::channel();
 
@@ -118,6 +121,7 @@ impl Watcher {
             .map_err(|err| eco_format!("failed to setup file watching ({err})"))?;
 
         Ok(Self {
+            output,
             rx,
             watcher,
             watched: HashMap::new(),
@@ -200,6 +204,10 @@ impl Watcher {
                 let event = event
                     .map_err(|err| eco_format!("failed to watch dependencies ({err})"))?;
 
+                if !is_relevant_event_kind(&event.kind) {
+                    continue;
+                }
+
                 // Workaround for notify-rs' implicit unwatch on remove/rename
                 // (triggered by some editors when saving files) with the
                 // inotify backend. By keeping track of the potentially
@@ -220,7 +228,17 @@ impl Watcher {
                     }
                 }
 
-                relevant |= self.is_event_relevant(&event);
+                // Don't recompile because the output file changed.
+                // FIXME: This doesn't work properly for multifile image export.
+                if event
+                    .paths
+                    .iter()
+                    .all(|path| is_same_file(path, &self.output).unwrap_or(false))
+                {
+                    continue;
+                }
+
+                relevant = true;
             }
 
             // If we found a relevant event or if any of the missing files now
@@ -230,23 +248,23 @@ impl Watcher {
             }
         }
     }
+}
 
-    /// Whether a watch event is relevant for compilation.
-    fn is_event_relevant(&self, event: &notify::Event) -> bool {
-        match &event.kind {
-            notify::EventKind::Any => true,
-            notify::EventKind::Access(_) => false,
-            notify::EventKind::Create(_) => true,
-            notify::EventKind::Modify(kind) => match kind {
-                notify::event::ModifyKind::Any => true,
-                notify::event::ModifyKind::Data(_) => true,
-                notify::event::ModifyKind::Metadata(_) => false,
-                notify::event::ModifyKind::Name(_) => true,
-                notify::event::ModifyKind::Other => false,
-            },
-            notify::EventKind::Remove(_) => true,
-            notify::EventKind::Other => false,
-        }
+/// Whether a kind of watch event is relevant for compilation.
+fn is_relevant_event_kind(kind: &notify::EventKind) -> bool {
+    match kind {
+        notify::EventKind::Any => true,
+        notify::EventKind::Access(_) => false,
+        notify::EventKind::Create(_) => true,
+        notify::EventKind::Modify(kind) => match kind {
+            notify::event::ModifyKind::Any => true,
+            notify::event::ModifyKind::Data(_) => true,
+            notify::event::ModifyKind::Metadata(_) => false,
+            notify::event::ModifyKind::Name(_) => true,
+            notify::event::ModifyKind::Other => false,
+        },
+        notify::EventKind::Remove(_) => true,
+        notify::EventKind::Other => false,
     }
 }
 
